TC: O(N)
SC: O(1)
Node* copyRandomList(Node* head) {
    if (head == NULL) {
        return NULL; // If the original list is empty, return NULL.
    }

    unordered_map<Node*, Node*> m; // Hash map to store mapping from original to new nodes.

    Node* newHead = new Node(head->data); // Create the head node for the new list.
    m[head] = newHead; // Map the original head to the new head.

    Node* oldtemp = head->next; // Pointer to traverse the original list.
    Node* newtemp = newHead; // Pointer to traverse the new list.

    // First pass: Copy the linked list structure (next pointers).
    while (oldtemp != NULL) {
        Node* copyNode = new Node(oldtemp->data); // Create a new node with the same data.
        m[oldtemp] = copyNode; // Store the mapping of the original node to its copy.
        newtemp->next = copyNode; // Connect the new node to the copied list.

        oldtemp = oldtemp->next; // Move to the next node in the original list.
        newtemp = newtemp->next; // Move to the next node in the new list.
    }

    // Reset pointers to copy random pointers.
    oldtemp = head; 
    newtemp = newHead; // This was incorrect before (it was incorrectly assigned to the last copied node).

    // Second pass: Copy the random pointers.
    while (oldtemp != NULL) {
        newtemp->random = m[oldtemp->random]; // Map the old random pointer to the new list.
        oldtemp = oldtemp->next; // Move to the next node in the original list.
        newtemp = newtemp->next; // Move to the next node in the new list.
    }

    return newHead; // Return the deep-copied linked list.
}
