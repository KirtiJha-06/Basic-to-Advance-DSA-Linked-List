TC: O(N)
SC: O(1)

class Solution {
  public:
    pair<Node *, Node *> splitList(struct Node *head) {
        // Edge case: if the list has 0 or 1 node
        if (!head || !head->next) 
            return {head, nullptr};

        Node* slow = head;
        Node* fast = head;

        // Find the middle of the circular linked list
        while (fast->next != head && fast->next->next != head) {
            slow = slow->next;
            fast = fast->next->next;
        }

        // Adjust fast for odd number of nodes
        if (fast->next->next == head) fast = fast->next;

        // Set heads for the two lists
        Node* head1 = head;         // First circular list starts from original head
        Node* head2 = slow->next;   // Second circular list starts from slow->next

        // Break the circular linked list into two parts
        slow->next = head1;         // First list ends at slow and loops back to head1
        fast->next = head2;         // Second list ends at fast and loops back to head2

        return {head1, head2};      // Return the two heads
    }
};
