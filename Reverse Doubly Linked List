TC: O(N)
SC: O(1)
class Solution {
  public:
    // Function to reverse a doubly linked list
    DLLNode* reverseDLL(DLLNode* head) {
        if (!head || !head->next) // If list is empty or has only one node, return head
            return head;
        
        DLLNode* prevNode = NULL;  
        DLLNode* currNode = head;
        
        while (currNode) {  // Traverse through the list
            prevNode = currNode->prev;  // Store previous node
            currNode->prev = currNode->next;  // Swap prev and next pointers
            currNode->next = prevNode;
            currNode = currNode->prev;  // Move to the next node (which is the original prev)
        }

        return prevNode->prev;  // prevNode points to the last node, return new head
    }
};
