TC: O(N)
SC: O(1)

// Definition for the linked list node
struct Node {
    int data;
    Node* next;
    Node(int x) { data = x; next = nullptr; }
};

class Solution {
public:

    // Function to reverse the linked list
    Node* reverse(Node* head) {
        Node* curr = head, *prev = nullptr, *next;
        while (curr != nullptr) {
            next = curr->next;   // Store the next node
            curr->next = prev;   // Reverse the current node's pointer
            prev = curr;         // Move prev one step ahead
            curr = next;         // Move curr one step ahead
        }
        return prev; // New head of the reversed list
    }

    // Function to add one to the reversed linked list
    Node* addoneutil(Node* head) {
        Node* res = head;  // Pointer to traverse the list
        Node* curr = head;
        Node* last = nullptr;
        int carry = 1, sum;

        while (curr != nullptr) {
            sum = carry + curr->data;  // Add carry to current node's data
            carry = (sum >= 10) ? 1 : 0;  // Update carry
            curr->data = sum % 10;  // Store last digit in the node
            last = curr;
            curr = curr->next;
        }

        // If there's a carry left, add a new node
        if (carry > 0) last->next = new Node(carry);

        return res;
    }

    // Main function to add 1 to the number represented by the linked list
    Node* addOne(Node* head) {
        head = reverse(head);       // Step 1: Reverse the list
        head = addoneutil(head);    // Step 2: Add one to reversed list
        return reverse(head);       // Step 3: Reverse it back
    }
};
